@using System.Threading
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject HubConnection HubConnection

<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private CancellationTokenSource cts = new CancellationTokenSource();

    protected override void OnInitialized()
    {
        // launch the signalR connection in the background.
        // Note we dont want to block the rendering of the app until the connection is established
        // nor we want an exception to prevent the entire app from starting
        // Therefore we run it in the background without "await"
        // See: https://docs.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-5.0#handle-errors
        #pragma warning disable CS4014
        ConnectWithRetryAsync(cts.Token);

        // Once initialized the retry logic configured in the HubConnection will automatically attempt to reconnect
        // However, once it reaches its maximum number of attempts, it will give up and needs to be manually started again
        // handling this event will achieve that
        // See: https://docs.microsoft.com/en-us/aspnet/core/signalr/dotnet-client?view=aspnetcore-5.0&tabs=visual-studio#handle-lost-connection
        HubConnection.Closed += error =>
        {
            return ConnectWithRetryAsync(cts.Token);
        };
    }

    private async Task<bool> ConnectWithRetryAsync(CancellationToken token)
    {
        // Keep trying to until we can start or the token is canceled.
        while (true)
        {
            try
            {
                await HubConnection.StartAsync(token);
                return true;
            }
            catch when (token.IsCancellationRequested)
            {
                return false;
            }
            catch
            {
                // Failed to connect, trying again in 5000 ms.
                // This could be a random or incremental interval, similar to the reconnection strategy of the hub itself
                // (Note the HubConnection retry strategy does not apply during initial connection, nor once it reaches its max number of attempts)
                // See https://docs.microsoft.com/en-us/aspnet/core/signalr/dotnet-client?view=aspnetcore-5.0&tabs=visual-studio#handle-lost-connection
                await Task.Delay(5000);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        cts.Cancel();
        cts.Dispose();
        await HubConnection.DisposeAsync();
    }
}