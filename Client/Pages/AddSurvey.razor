@page "/add-survey"
@using BlazorSurveys.Shared
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager NavigationManager

<EditForm EditContext="@editContext" OnSubmit="@OnSubmit">
  @* <DataAnnotationsValidator /> *@
  <ObjectGraphDataAnnotationsValidator />
  <div class="@(editContext.GetValidationMessages().Any() ? "alert alert-danger" : "")">
    <ValidationSummary class="alert alert-danger" />
  </div>

  <div class="form-group">
    <label for="inputTitle">Title</label>
    <InputText id="inputTitle" class="form-control" @bind-Value="survey.Title" />
    @if(editContext.GetValidationMessages(() => survey.Title).Any()){
      <div class="invalid-feedback">
        @editContext.GetValidationMessages(() => survey.Title).First()
      </div>
    }
  </div>

  <div class="form-group">
    <label for="inputMinutes">Minutes</label>
    <InputNumber id="inputMinutes" class="form-control" @bind-Value="survey.Minutes" />
    @if(editContext.GetValidationMessages(() => survey.Minutes).Any()){
      <div class="invalid-feedback">
        @editContext.GetValidationMessages(() => survey.Minutes).First()
      </div>
    }
  </div>

  <label>Options</label>
  @foreach (var option in survey.Options)
  {
    <div class="input-group mb-3">
      <InputText id="inputMinutes" class="form-control" @bind-Value="option.OptionValue" />
      <div class="input-group-append">
        <button class="btn btn-outline-primary" type="button" @onclick="@(() => survey.RemoveOption(option))">Remove</button>
      </div>
      @if(editContext.GetValidationMessages(() => option.OptionValue).Any()){
        <div class="invalid-feedback">
          @editContext.GetValidationMessages(() => option.OptionValue).First()
        </div>
      }
    </div>
  }
  <p><button class="btn btn-primary" type="button" @onclick="@(() => survey.AddOption())"><i class="oi oi-plus" /> Add Option</button></p>

  <p>
    <button type="submit" class="btn btn-primary float-right">Submit</button>
  </p>
</EditForm>

@code {
    private SurveyCreateModel survey = new SurveyCreateModel();
    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(survey);
        editContext.SetFieldCssClassProvider(new BootstrapFieldClassProvider());
    }
    private async Task OnSubmit()
    {
        if (!editContext.Validate()) return;

        await Http.PostAsJsonAsync<Survey>($"api/survey", new Survey {
            Title = survey.Title,
            ExpiresAt = DateTime.Now.AddMinutes(survey.Minutes.Value),
            Options = survey.Options.Select(o => o.OptionValue).ToList()
        });

        NavigationManager.NavigateTo("");
    }

    private class SurveyCreateModel: IValidatableObject
    {
        [Required]
        [MaxLength(50)]
        public string Title { get; set; }
        [Required]
        public int? Minutes { get; set; }
        [ValidateComplexType]
        public List<OptionCreateModel> Options { get; set; } = new List<OptionCreateModel>();

        public void RemoveOption(OptionCreateModel option)
        {
            this.Options.Remove(option);
        }

        public void AddOption()
        {
            this.Options.Add(new OptionCreateModel());
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (this.Options.Count < 2 )
            {
                yield return new ValidationResult("A survey requires at least 2 options.");
            }
        }
    }

    private class OptionCreateModel
    {
        [Required]
        [MaxLength(20)]
        public string OptionValue { get; set; }
    }

    private class BootstrapFieldClassProvider : FieldCssClassProvider
    {
        public override string GetFieldCssClass(EditContext editContext, in FieldIdentifier fieldIdentifier)
        {
            var isValid = !editContext.GetValidationMessages(fieldIdentifier).Any();
            return isValid ? "" : "is-invalid";
        }
    }
}